{"compiler":{"version":"0.7.5+commit.eb77ed08"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_ovmL2CrossDomainMessenger","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"},{"indexed":false,"internalType":"string","name":"signature","type":"string"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"TransactionExecuted","type":"event"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"string","name":"signature","type":"string"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"executeTransaction","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"ovmL2CrossDomainMessenger","outputs":[{"internalType":"contract iOVM_CrossDomainMessenger","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"}],"name":"retrieveETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Cryptex.finance","kind":"dev","methods":{"constructor":{"params":{"_ovmL2CrossDomainMessenger":"address of the optimism ovmL2CrossDomainMessenger","_owner":"the owner of the contract"}},"executeTransaction(address,uint256,string,bytes)":{"details":"Only owner can call it","params":{"data":"bytes","signature":"string","target":"address","value":"uint256"}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"retrieveETH(address)":{"details":"Only owner can call it","params":{"_to":"address"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"TCAP Optimistic Treasury","version":1},"userdoc":{"events":{"TransactionExecuted(address,uint256,string,bytes)":{"notice":"An event emitted when a transaction is executed"}},"kind":"user","methods":{"constructor":{"notice":"Constructor"},"executeTransaction(address,uint256,string,bytes)":{"notice":"Allows the owner to execute custom transactions"},"ovmL2CrossDomainMessenger()":{"notice":"Address of the optimistic ovmL2CrossDomainMessenger contract."},"retrieveETH(address)":{"notice":"Retrieves the eth stuck on the treasury"}},"notice":"This contract will hold the assets generated by the optimism network.","version":1}},"settings":{"compilationTarget":{"contracts/optimism/OptimisticTreasury.sol":"OptimisticTreasury"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs","useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"contracts/ITreasury.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"./Proprietor.sol\";\n\n/**\n * @title TCAP Treasury\n * @author Cryptex.finance\n * @notice This contract will hold the assets generated on L2 networks.\n */\ncontract ITreasury is Proprietor {\n\t/// @notice An event emitted when a transaction is executed\n\tevent TransactionExecuted(\n\t\taddress indexed target,\n\t\tuint256 value,\n\t\tstring signature,\n\t\tbytes data\n\t);\n\n\n\t/**\n\t * @notice Constructor\n\t * @param _owner the owner of the contract\n\t */\n\tconstructor(address _owner) Proprietor(_owner) {}\n\n\t/**\n\t * @notice Allows the owner to execute custom transactions\n\t * @param target address\n\t * @param value uint256\n\t * @param signature string\n\t * @param data bytes\n\t * @dev Only owner can call it\n\t */\n\tfunction executeTransaction(\n\t\taddress target,\n\t\tuint256 value,\n\t\tstring memory signature,\n\t\tbytes memory data\n\t) external payable onlyOwner returns (bytes memory) {\n\t\tbytes memory callData;\n\t\tif (bytes(signature).length == 0) {\n\t\t\tcallData = data;\n\t\t} else {\n\t\t\tcallData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n\t\t}\n\n\t\trequire(\n\t\t\ttarget != address(0),\n\t\t\t\"ITreasury::executeTransaction: target can't be zero\"\n\t\t);\n\n\t\t// solium-disable-next-line security/no-call-value\n\t\t(bool success, bytes memory returnData) =\n\t\ttarget.call{value : value}(callData);\n\t\trequire(\n\t\t\tsuccess,\n\t\t\t\"ITreasury::executeTransaction: Transaction execution reverted.\"\n\t\t);\n\n\t\temit TransactionExecuted(target, value, signature, data);\n\t\t(target, value, signature, data);\n\n\t\treturn returnData;\n\t}\n\n\t/**\n\t * @notice Retrieves the eth stuck on the treasury\n\t * @param _to address\n\t * @dev Only owner can call it\n\t */\n\tfunction retrieveETH(address _to) external onlyOwner {\n\t\trequire(\n\t\t\t_to != address(0),\n\t\t\t\"ITreasury::retrieveETH: address can't be zero\"\n\t\t);\n\t\tuint256 amount = address(this).balance;\n\t\tpayable(_to).transfer(amount);\n\t}\n\n\t/// @notice Allows the contract to receive ETH\n\treceive() external payable {}\n}\n","keccak256":"0x2ca98adc3364cd66453d0684cab526c588c9b131eee5f5a4d7ddad13557750da","license":"MIT"},"contracts/Proprietor.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.5;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Proprietor {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor (address _owner) {\n        require(_owner != address(0), \"Proprietor::constructor: address can't be zero\");\n        owner = _owner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() virtual {\n        require(owner == msg.sender, \"Proprietor: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Proprietor: new owner is the zero address\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n","keccak256":"0x6233845a915eedfb3fcd50c8e69aa4b2d8343cc5ce059955d34b33bc485e242f","license":"MIT"},"contracts/optimism/OptimisticTreasury.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\n\nimport \"../ITreasury.sol\";\nimport \"./iOVM_CrossDomainMessenger.sol\";\n\n/**\n * @title TCAP Optimistic Treasury\n * @author Cryptex.finance\n * @notice This contract will hold the assets generated by the optimism network.\n */\ncontract OptimisticTreasury is ITreasury {\n\n\t/// @notice Address of the optimistic ovmL2CrossDomainMessenger contract.\n\tiOVM_CrossDomainMessenger public immutable ovmL2CrossDomainMessenger;\n\n\t/**\n\t * @notice Constructor\n\t * @param _owner the owner of the contract\n\t * @param _ovmL2CrossDomainMessenger address of the optimism ovmL2CrossDomainMessenger\n\t */\n\tconstructor(\n\t\taddress _owner,\n\t\taddress _ovmL2CrossDomainMessenger\n\t) ITreasury(_owner) {\n\t\trequire(\n\t\t\t_ovmL2CrossDomainMessenger != address(0),\n\t\t\t\"OptimisticTreasury::constructor: address can't be zero\"\n\t\t);\n\t\tovmL2CrossDomainMessenger = iOVM_CrossDomainMessenger(_ovmL2CrossDomainMessenger);\n\t}\n\n\t// @notice Throws if called by an account different from the owner\n\t// @dev call needs to come from ovmL2CrossDomainMessenger\n\tmodifier onlyOwner() override {\n\t\trequire(\n\t\t\tmsg.sender == address(ovmL2CrossDomainMessenger)\n\t\t\t&& ovmL2CrossDomainMessenger.xDomainMessageSender() == owner, \"OptimisticTreasury: caller is not the owner\"\n\t\t);\n\t\t_;\n\t}\n}\n","keccak256":"0x8b21386188313ff11846984fbbc5b41de64e941941375cb68e08669f9690d8cb","license":"MIT"},"contracts/optimism/iOVM_CrossDomainMessenger.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.7.5;\npragma experimental ABIEncoderV2;\n\n/**\n * @title iOVM_CrossDomainMessenger\n */\ninterface iOVM_CrossDomainMessenger {\n\n\t/**********\n\t * Events *\n\t **********/\n\n\tevent SentMessage(bytes message);\n\tevent RelayedMessage(bytes32 msgHash);\n\tevent FailedRelayedMessage(bytes32 msgHash);\n\n\n\t/*************\n\t * Variables *\n\t *************/\n\n\tfunction xDomainMessageSender() external view returns (address);\n\n\n\t/********************\n\t * Public Functions *\n\t ********************/\n\n\t/**\n\t * Sends a cross domain message to the target messenger.\n\t * @param _target Target contract address.\n\t * @param _message Message to send to the target.\n\t * @param _gasLimit Gas limit for the provided message.\n\t */\n\tfunction sendMessage(\n\t\taddress _target,\n\t\tbytes calldata _message,\n\t\tuint32 _gasLimit\n\t) external;\n}\n","keccak256":"0x93edc4bdd4e4966e5f1ee44ab2b7a4f53bf7594be13dae53394f901ba91f95fb","license":"MIT"}},"version":1}