{"compiler":{"version":"0.8.1+commit.df193b15"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"token_","type":"address"},{"internalType":"address","name":"beneficiary_","type":"address"},{"internalType":"uint256","name":"releaseTime_","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"beneficiary","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"release","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"releaseTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"A token holder contract that will allow a beneficiary to extract the tokens after a given release time. Useful for simple vesting schedules like \"advisors get all of their tokens after 1 year\".","kind":"dev","methods":{"beneficiary()":{"details":"Returns the beneficiary that will receive the tokens."},"constructor":{"details":"Deploys a timelock instance that is able to hold the token specified, and will only release it to `beneficiary_` when {release} is invoked after `releaseTime_`. The release time is specified as a Unix timestamp (in seconds)."},"release()":{"details":"Transfers tokens held by the timelock to the beneficiary. Will only succeed if invoked after the release time."},"releaseTime()":{"details":"Returns the time when the tokens are released in seconds since Unix epoch (i.e. Unix timestamp)."},"token()":{"details":"Returns the token being held."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"contracts/TokenTimelock.sol":"TokenTimelock"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"contracts/Address.sol":{"keccak256":"0xc3025aaa95aa8f9e80b9a7f76c40a4b94b60b065bd3bbe3cb0a476e95846d658","license":"MIT","urls":["bzz-raw://89d75bac0237f5c371a2519ce92fbacf3c4ecdcff4cc9f10a5f3673d82876f56","dweb:/ipfs/QmeTypoZNTYKmSdmKiFvJxwot72RE5Bddi5ssX3heW2xdP"]},"contracts/IERC20.sol":{"keccak256":"0x6ba702bf7bb3ff99b585fd812e6234a6896dc9151500eb9bb58716c14bcb69f4","license":"MIT","urls":["bzz-raw://c6b8cfe345248cdd9956c5085dfb7209387a129e6aa207a09056d9614d87ee49","dweb:/ipfs/QmXPA8HVT2T449p3bmZYaPqEJgxHNNFXrz3zqFBfn9D7re"]},"contracts/SafeERC20.sol":{"keccak256":"0x5c990c0247f4f1c283f6235de0b455f692b7e711ddbe50ce769220325cd73ed4","license":"MIT","urls":["bzz-raw://5df26f207e469aa16c66468a228a0eb5e3c0dc7e8a0c0998bca9d0d0a6c1b173","dweb:/ipfs/QmdPJqkNFCp2P5phtuyDcLaPCj1LUbw2csGJD7N31CZ5Cp"]},"contracts/TokenTimelock.sol":{"keccak256":"0x62506ed46aff05c2d65c9af347fccb69feb1aca114d4444663d0ba254ab072cf","license":"MIT","urls":["bzz-raw://90481fcad6bebeec07e664e3aabb5daec8e53a5b3f64178646ad9d2b92b22a0b","dweb:/ipfs/QmXZ7HZQxViqWE1XfesdLRMK5BiFQc69Ax7yfjKUgFCPMU"]}},"version":1}